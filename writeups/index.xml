<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writeups on L3ak CTF</title>
    <link>https://l3ak.org/writeups/</link>
    <description>Recent content in Writeups on L3ak CTF</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://l3ak.org/writeups/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DanteCTF 2023 - [Radio Frequency] </title>
      <link>https://l3ak.org/writeups/dantectf/</link>
      <pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://l3ak.org/writeups/dantectf/</guid>
      <description>Difficulty Category     Easy ForensicsðŸ©¸    First as always , lets download the file and see what we can do. This can take sometime since its not a small download (834 MB).
As we can see its a 7-Zip archive, lets extract what&amp;rsquo;s inside this zip by running this command 7z e ImagoQualitatis.7z .
Great, we extracted the file successfully ! I checked what type of file we are working with but no useful results came up, as well as I noticed that the size of it is very large being 4.</description>
      <content>&lt;p&gt;&lt;img src=&#34;chall1.png&#34; alt=&#34;C0ULD N0T B3 L04AD3D&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Difficulty&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Category&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;ForensicsðŸ©¸&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;First as always , lets download the file and see what we can do. This can take sometime since its not a small download (834 MB).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;initd1.png&#34; alt=&#34;C0ULD N0T B3 L04AD3D&#34;&gt;&lt;/p&gt;
&lt;p&gt;As we can see its a 7-Zip archive, lets extract what&amp;rsquo;s inside this zip by running this command
&lt;strong&gt;&lt;code&gt;7z e ImagoQualitatis.7z&lt;/code&gt;&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;file1.png&#34; alt=&#34;C0ULD N0T B3 L04AD3D&#34;&gt;&lt;/p&gt;
&lt;p&gt;Great, we extracted the file successfully ! I checked what type of file we are working with but no useful results came up, as well as I noticed that the size of it is very large being 4.6 GB. On top of that I also checked the file header , no luck there either even after some googling. We for sure know its something to do with &lt;strong&gt;RF&lt;/strong&gt; so i researched a bit on software used to open such files, and to my luck i found a software called &lt;code&gt;GQRX&lt;/code&gt;, which also is mentioned in the file name !&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s install it and give it a shot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;rad1.png&#34; alt=&#34;C0ULD N0T B3 L04AD3D&#34;&gt;&lt;/p&gt;
&lt;p&gt;Interesting okay , time to try to open the file with that software and see if we get any luck, that can be done with going to &lt;code&gt;Tools --&amp;gt; I/Q Recoder --&amp;gt; Specifying the absolute path to our file&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;start1.png&#34; alt=&#34;C0ULD N0T B3 L04AD3D&#34;&gt;&lt;/p&gt;
&lt;p&gt;This was something we were for sure looking for ! If there was one thing I learned from playing &lt;code&gt;CTFs&lt;/code&gt; is always be very patient while doing these type of challenges, and to no surprise after a few minutes I see a curly closing brace &lt;strong&gt;}&lt;/strong&gt; which hints that other parts of the flag are to come.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;br.png&#34; alt=&#34;C0ULD N0T B3 L04AD3D&#34;&gt;&lt;/p&gt;
&lt;p&gt;By waiting for about 4-5 minutes I ended up putting the pieces of the flag together character by character and in the end we got the &lt;em&gt;flag&lt;/em&gt; and the first blood ðŸ©¸!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FLAG&lt;/strong&gt; &lt;em&gt;&amp;ndash;&amp;gt;&lt;/em&gt; &lt;strong&gt;&lt;code&gt;DANTE{n3w_w4v35_0ld_5ch00l}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;almost-perfect-remote-signing&#34;&gt;Almost Perfect Remote Signing&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;chall2.png&#34; alt=&#34;C0ULD N0T B3 L04AD3D&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Difficulty&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Category&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Hard&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Forensics&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this challenge, we are given a &lt;code&gt;.wav&lt;/code&gt; file with the flag hidden somewhere inside it. Listening to the file yields nothing but ~8 seconds of what sounds like static noise, so we know the flag is encoded inside the sound data somehow. Running the file through steg tools like &lt;strong&gt;Binwalk&lt;/strong&gt; and &lt;strong&gt;WavSteg&lt;/strong&gt; doesn&amp;rsquo;t reveal much, and LSB analysis doesn&amp;rsquo;t show any signs of the image being encoded in the bits of the file. At this point, I opened the file in &lt;code&gt;Sonic Visualiser&lt;/code&gt; to see what secrets may be encoded in the spectrogram or frequency information of the sound data. Examining the spectrogram, I saw something interesting:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;spec.png&#34; alt=&#34;C0ULD N0T B3 L04AD3D&#34;&gt;&lt;/p&gt;
&lt;p&gt;There is a faint binary signal present in the spectrogram! This discovery led me to think that the flag was encoded in the sound data in binary manner somewhow (using 0&amp;rsquo;s and 1&amp;rsquo;s). Being a novice in the area of digital signal processing, I had to do a significant amount of research to determine how this is achieved - via &lt;a href=&#34;https://en.wikipedia.org/wiki/Frequency-shift_keying&#34;&gt;AFSK&lt;/a&gt; (Audio Frequency Shift Keying). In this protocol, binary data is modulated onto a continuous analog signal for long-distance transmission (e.g., radio). To decode this manually would be a real hassle, so I looked up tools to automate the process. After trying and failing with tools like &lt;strong&gt;GnuRadio&lt;/strong&gt;, I stumbled upon &lt;a href=&#34;https://www.kali.org/tools/multimon-ng/&#34;&gt;multimon-ng&lt;/a&gt;. This tool will demodulate the signal and output the encoded data automatically, as long as it knows the exact protocol being used. There are several AFSK protocols to choose from:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;proto.png&#34; alt=&#34;C0ULD N0T B3 L04AD3D&#34;&gt;&lt;/p&gt;
&lt;p&gt;And I ended up choosing AFSK1200 to start with (which turned out to be the right choice!).
This tool requires the &lt;code&gt;.wav&lt;/code&gt; file to be in &lt;code&gt;.raw&lt;/code&gt; format, which can be achieved using sox:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;sox -t wav aprs_out.wav -esigned-integer -b16 -r 22050 -t raw aprs_out.raw&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This command essentially takes the wave file and converts it to &lt;code&gt;.raw&lt;/code&gt; format. Notice the sampling rate of 22050Hz being used here, which is the standard for these types of radio transmissions. Once this is done, we can use &lt;strong&gt;multimon-ng&lt;/strong&gt; to decode the signal:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;multimon-ng -t raw -a AFSK1200 aprs_out.raw &amp;gt; flag&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After doing those steps the decoded data looks something like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;decoded.png&#34; alt=&#34;C0ULD N0T B3 L04AD3D&#34;&gt;&lt;/p&gt;
&lt;p&gt;We are definitely on the right track - we can see &amp;ldquo;Hello flag!&amp;rdquo; in every packet. If we scrutinize the data closely, we can see that there are slightly different coordinates used in each packet transmission:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;decoded2.png&#34; alt=&#34;C0ULD N0T B3 L04AD3D&#34;&gt;&lt;/p&gt;
&lt;p&gt;Is the flag encoded in these coordinates somehow? Plotting these coordinates on a Cartesian coordinate system yields:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;plane.png&#34; alt=&#34;C0ULD N0T B3 L04AD3D&#34;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not pretty, but zooming in around small groups of characters can help us read the flag characters:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;plane2.png&#34; alt=&#34;C0ULD N0T B3 L04AD3D&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FLAG&lt;/strong&gt; &lt;em&gt;&amp;ndash;&amp;gt;&lt;/em&gt; &lt;strong&gt;&lt;code&gt;DANTE{FLAG_REPORTING_SYSTEM}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    </item>
    
  </channel>
</rss>
